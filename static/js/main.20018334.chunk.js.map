{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/ErrorBoundary.js","components/MutateButton.js","redux/constants.js","redux/actions.js","containers/App.js","redux/reducers.js","index.js"],"names":["Card","id","name","email","creatureType","randomize","className","alt","src","CardList","robots","cardComponent","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","MutateButton","changeRobots","onClick","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","CHANGE_ROBOTS","myArray","App","dispatch","useDispatch","searchField","useSelector","searchRobots","requestRobots","isPending","onRequestRobots","fetch","then","response","json","console","log","data","payload","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","randomElement","Math","floor","random","length","event","text","target","value","creature","getcreatureString","initialState","initialStateRobots","initialType","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20018334.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport './Card.css'\n\n// const Card = (props) => {\n//     return (\n//         <div className='bg-light-green dib hr3 pa3 ma2 grow bw2 shadow-5'>\n//             <img alt='robot' src={`https://robohash.org/${props.id}?200x200`}/>\n//             <div>\n//                 <h2>{props.name}</h2>\n//                 <p>{props.email}</p>\n//             </div>\n//         </div>\n//     );\n// }\n// export default Card;\n\n\n// or\n\n\nconst Card = ({ id, name, email, randomize, creatureType}) => {\n\n    return (\n        <Fragment>\n            <div \n                className='tc bg-light-green dib hr3 pa3 ma2 grow bw2 shadow-5'\n                >\n                <img alt='robot' src={`https://robohash.org/${id + creatureType}`}/>\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        </Fragment>\n    );\n}\nexport default Card;","import React from 'react';\nimport Card from './Card'\nconst CardList = ({ robots, creatureType }) => {\n    const cardComponent = robots.map((user, i) => {\n        return (\n        <Card \n        key={i} \n        id={robots[i].id} \n        name={robots[i].name} \n        email={robots[i].email}\n        creatureType={creatureType} />\n        )\n    });\n    return (\n        <div>\n            {cardComponent};\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='Search Friends'\n                onChange={searchChange}\n            />\n            {/* on Change is a Pre-built function */}\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow:'scroll', border:'1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({ hasError: true});\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooooops. That is not good</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport './MutateButton.css'\n\nconst MutateButton = ({changeRobots}) => {\n    return (\n        <div className=\"mybutton\">\n            <button onClick={changeRobots}>MUTATE!</button>\n        </div>\n    );\n};\n\nexport default MutateButton;","export const CHANGE_SEARCH_FIELD= 'CHANGE_SEARCH_FIELD';\n\n// since it is a promise, it has 3 states\n// standard for basic transactions like AJAX\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\nexport const CHANGE_ROBOTS = 'CHANGE_ROBOTS';","import { \n    CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    CHANGE_ROBOTS\n } from './constants';\n\n// an example of action\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=> {\n            const robots = response.json();\n            console.log(robots);\n            return robots;\n        })\n        .then(data => dispatch( {type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n\nconst myArray = [\"android\", \"alien\", \"robot\", \"cat\", \"human\"]\n\nexport const changeRobots = () => {\n    \n    const randomElement = myArray[Math.floor(Math.random() * myArray.length)];\n    console.log(randomElement);\n    return {type:CHANGE_ROBOTS, payload: randomElement};\n\n}","import React, { useEffect } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from './ErrorBoundary.js';\nimport MutateButton from '../components/MutateButton';\n\n// actions\nimport { setSearchField, requestRobots, changeRobots } from '../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nfunction App () {\n\n    const dispatch = useDispatch();\n\n    // the states\n\n    const { searchField } = useSelector(\n        (state) => state.searchRobots\n    );\n    \n    const { robots, isPending, error } = useSelector(\n        (state) => state.requestRobots\n    );\n\n    const { creatureType } = useSelector(\n        (state) => state.changeRobots\n    )\n\n    const getcreatureString = (creature) => {\n        switch (creature) {\n            case \"alien\":\n                return '?set=set2';\n            case \"robot\":\n                return '?set=set3';\n            case \"cat\":\n                return '?set=set4';\n            case \"human\":\n                return '?set=set5';\n            default:\n                return '';\n        }\n    } \n\n    const onSearchChange = (event) => {\n        dispatch(setSearchField(event.target.value));\n    }\n\n    const onRequestRobots = () => {\n        dispatch(requestRobots())\n    }\n\n    const onChangeRobots = () => {\n        dispatch(changeRobots());\n    }\n\n    // const randomize = (event) => {\n    //     console.log(event);\n    // }\n\n    // Replaces componentDidMount\n    useEffect(() => {\n        onRequestRobots()\n    }, [])\n\n\n    const filteredRobots = robots.filter(\n        robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        }\n    );\n\n    if (isPending) {\n        return <h1>Loading...</h1>\n    } else {\n        return (\n                <div className='tc'>\n                    <h1 className='f1'>{`${creatureType}Friends`}</h1>\n                    <MutateButton changeRobots={onChangeRobots} />\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList \n                                robots={filteredRobots}\n                                creatureType={getcreatureString(creatureType)}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n        );\n    }\n}\n\n// can name the parameters but can use this convention\nexport default App;\n\n// connect is a higher order function, takes in a function and returns a function","import { \n    CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    CHANGE_ROBOTS\n } from './constants';\n\nconst initialState = {\n    searchField: ''\n}\n\n//  reducer takes in action and modify.returns the new state\n// takes in a state and returns a new state\n// '=' means default values\nexport const searchRobots = (state=initialState, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            // this is returning the new state\n            // or\n            // return { ...state, searchField:action.payload}\n            return  Object.assign({}, state, { searchField: action.payload } );\n        default:\n            return state;\n    }\n}\n\n// remember that this is the action\n// export const setSearchField = (text) => ({\n//     type: CHANGE_SEARCH_FIELD,\n//     payload: text\n// })\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false})\n        default:\n            return state;\n    }\n}\n\nconst initialType = {\n    creatureType: 'android'\n}\n\nexport const changeRobots = (state=initialType, action={}) => {\n    switch (action.type) {\n        case CHANGE_ROBOTS:\n            return Object.assign({}, state, {creatureType: action.payload});\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// ./ means it is in the same directory\nimport thunkMiddleware from 'redux-thunk';\n\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchRobots, requestRobots, changeRobots } from './redux/reducers';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots, changeRobots});\n// combine all the reducers\n\n// create the store from the reducer(search Robots)\n// you can add more middleware here (ordered by parameter)\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  // state is passed down to every single components of App\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// or \n// using fragments\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}