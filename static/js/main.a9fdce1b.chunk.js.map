{"version":3,"sources":["containers/Card.js","containers/CardList.js","containers/SearchBox.js","containers/Scroll.js","components/ErrorBoundary.js","components/App.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","cardComponent","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById"],"mappings":"wOAiCeA,EAbF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACtB,OACI,cAAC,WAAD,UACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAA1B,cACpB,gCACI,6BAAKC,IACL,4BAAIC,aCRTI,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OACA,cAAC,EAAD,CAEAX,GAAIO,EAAOI,GAAGX,GACdC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,OAHZS,MAMT,OACI,gCACKH,EADL,QCGOI,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKX,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCXI,G,MARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAmBC,OAAQ,SAAlE,SACKJ,EAAMK,aCiBJC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG9B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,2DAEJG,KAAKX,MAAMK,a,GAhBEQ,aC+DbC,E,kDAtDX,aAAe,IAAD,8BACV,gBAmBJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,QAC1CC,QAAQC,IAAIL,EAAME,OAAOC,QApBzB,EAAKZ,MAAQ,CACTnB,OAAQ,GACR6B,YAAa,IALP,E,qDAUd,WAAqB,IAAD,OAChBK,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GAAU,EAAKd,SAAS,CAAExB,OAAQsC,S,oBAW5C,WACI,MAA+Bf,KAAKJ,MAA5BnB,EAAR,EAAQA,OAAQ6B,EAAhB,EAAgBA,YAEVU,EAAiBvC,EAAOwC,QAC1B,SAAAC,GACI,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASd,EAAYa,kBAI7D,OAAK1C,EAAO4C,OAIJ,mCACI,sBAAKhD,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU3B,OAAQuC,aAT/B,gD,GApCDd,aCelBoB,IAASC,OACT,cAAC,EAAD,IACEC,SAASC,eAAe,W","file":"static/js/main.a9fdce1b.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\n\n// const Card = (props) => {\n//     return (\n//         <div className='bg-light-green dib hr3 pa3 ma2 grow bw2 shadow-5'>\n//             <img alt='robot' src={`https://robohash.org/${props.id}?200x200`}/>\n//             <div>\n//                 <h2>{props.name}</h2>\n//                 <p>{props.email}</p>\n//             </div>\n//         </div>\n//     );\n// }\n// export default Card;\n\n\n// or\n\n\nconst Card = ({ id, name, email}) => {\n    return (\n        <Fragment>\n            <div className='tc bg-light-green dib hr3 pa3 ma2 grow bw2 shadow-5'>\n                <img alt='robot' src={`https://robohash.org/${id}?200x200`}/>\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        </Fragment>\n    );\n}\nexport default Card;","import React, { Fragment } from 'react';\nimport Card from './Card'\nconst CardList = ({ robots }) => {\n    const cardComponent = robots.map((user, i) => {\n        return (\n        <Card \n        key={i} \n        id={robots[i].id} \n        name={robots[i].name} \n        email={robots[i].email} />\n        )\n    });\n    return (\n        <div>\n            {cardComponent};\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots'\n                onChange={searchChange}\n            />\n            {/* on Change is a Pre-built function */}\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow:'scroll', border:'1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({ hasError: true});\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooooops. That is not good</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component, Fragment } from 'react';\nimport CardList from '../containers/CardList';\nimport SearchBox from '../containers/SearchBox';\nimport './App.css';\nimport Scroll from '../containers/Scroll';\nimport ErrorBoundary from './ErrorBoundary.js';\n\n// STATE >> props\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        // something that can change, lives in the parent\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    // life cycle function / in built function so do not need arrow keys\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=> {\n            return response.json();\n        })\n        .then(users => {this.setState({ robots: users})});\n        // don't need to use {} if one return statement.\n        // need to use {} and return statement if multiple lines\n    }\n\n    // custom function, so need to use arrows functions\n    onSearchChange = (event) => {\n        // setState is a standard synthax\n        this.setState({ searchfield: event.target.value})\n        console.log(event.target.value);\n    }\n    render() {\n        const { robots, searchfield} = this.state;\n        \n        const filteredRobots = robots.filter(\n            robot => {\n                return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n            }\n        );\n\n        if (!robots.length) {\n            return <h1>Loading...</h1>\n        } else {\n            return (\n                <>\n                    <div className='tc'>\n                        <h1 className='f1'>RoboFriends</h1>\n                        <SearchBox searchChange={this.onSearchChange}/>\n                        <Scroll>\n                            <ErrorBoundary>\n                                <CardList robots={filteredRobots}/>\n                            </ErrorBoundary>\n                        </Scroll>\n                    </div>\n                </>\n            );\n        }\n    }\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// ./ means it is in the same directory\n// import App from './App';\n// if you never put .something, it assumes that it is JS\n// import reportWebVitals from './reportWebVitals';\n// import Hello from './Hello';\n// import Card from './Card';\n// import CardList from './CardList';\nimport 'tachyons';\n// import { robots } from './robots';\nimport App from './components/App';\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// ReactDOM.render(\n// <CardList robots={robots} />,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(\n<App />,\n  document.getElementById('root')\n);\n\n// or \n// using fragments\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}